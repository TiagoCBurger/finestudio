/**
 * Utilit√°rio para detectar e regenerar URLs de storage expiradas
 */

import { r2Storage } from './r2';
import { supabaseStorage } from './supabase';
import type { StorageBucket } from './types';

export interface UrlRefreshOptions {
    userId: string;
    bucket: StorageBucket;
    filename: string;
    contentType: string;
    currentUrl: string;
}

/**
 * Verifica se uma URL est√° expirada ou inacess√≠vel
 */
export async function isUrlExpired(url: string): Promise<boolean> {
    try {
        const response = await fetch(url, { method: 'HEAD' });
        return !response.ok;
    } catch {
        return true;
    }
}

/**
 * Detecta se uma URL √© uma URL assinada do Cloudflare R2
 */
export function isR2SignedUrl(url: string): boolean {
    return url.includes('r2.cloudflarestorage.com') && url.includes('X-Amz-Signature');
}

/**
 * Detecta se uma URL √© do Supabase Storage
 */
export function isSupabaseStorageUrl(url: string): boolean {
    return url.includes('supabase.co/storage/v1/object/public/');
}

/**
 * Extrai informa√ß√µes de uma URL de storage para regenera√ß√£o
 */
export function parseStorageUrl(url: string): {
    provider: 'r2' | 'supabase' | 'unknown';
    bucket?: string;
    userId?: string;
    filename?: string;
} {
    if (isR2SignedUrl(url)) {
        // Parse R2 URL: https://account.r2.cloudflarestorage.com/bucket/files/userId/filename.ext?...
        const urlObj = new URL(url);
        const pathParts = urlObj.pathname.split('/').filter(Boolean);

        if (pathParts.length >= 4) {
            return {
                provider: 'r2',
                bucket: pathParts[1] as StorageBucket,
                userId: pathParts[2],
                filename: pathParts[3],
            };
        }
    }

    if (isSupabaseStorageUrl(url)) {
        // Parse Supabase URL: https://project.supabase.co/storage/v1/object/public/bucket/userId/filename.ext
        const urlObj = new URL(url);
        const pathParts = urlObj.pathname.split('/').filter(Boolean);

        if (pathParts.length >= 6) {
            return {
                provider: 'supabase',
                bucket: pathParts[4] as StorageBucket,
                userId: pathParts[5],
                filename: pathParts[6],
            };
        }
    }

    return { provider: 'unknown' };
}

/**
 * Regenera uma URL expirada
 * Nota: Isso s√≥ funciona para URLs assinadas do R2. 
 * Para URLs p√∫blicas ou do Supabase, n√£o √© necess√°rio regenerar.
 */
export async function refreshExpiredUrl(options: UrlRefreshOptions): Promise<string | null> {
    const { currentUrl } = options;

    // S√≥ regenerar se for uma URL assinada do R2
    if (!isR2SignedUrl(currentUrl)) {
        console.log('URL n√£o √© uma URL assinada do R2, n√£o precisa regenerar');
        return null;
    }

    // Verificar se realmente est√° expirada
    const expired = await isUrlExpired(currentUrl);
    if (!expired) {
        console.log('URL ainda est√° v√°lida');
        return null;
    }

    console.log('üîÑ Regenerando URL expirada do R2...');

    try {
        // Criar um buffer vazio para simular o arquivo (n√£o vamos re-upload)
        // Em uma implementa√ß√£o real, voc√™ precisaria ter acesso ao arquivo original
        // ou implementar um endpoint espec√≠fico para regenerar URLs

        // Por enquanto, retornamos null para indicar que n√£o foi poss√≠vel regenerar
        // A solu√ß√£o recomendada √© configurar URLs p√∫blicas no R2
        console.warn('‚ö†Ô∏è Regenera√ß√£o de URL n√£o implementada. Configure URLs p√∫blicas no R2.');
        return null;

    } catch (error) {
        console.error('‚ùå Erro ao regenerar URL:', error);
        return null;
    }
}

/**
 * Hook para usar no React para detectar e lidar com URLs expiradas
 */
export function useUrlRefresh() {
    const checkAndRefreshUrl = async (url: string): Promise<string | null> => {
        if (!url) return null;

        const expired = await isUrlExpired(url);
        if (!expired) return url;

        const urlInfo = parseStorageUrl(url);

        if (urlInfo.provider === 'r2' && isR2SignedUrl(url)) {
            console.warn('‚ö†Ô∏è URL do R2 expirada detectada. Recomenda√ß√£o: configure URLs p√∫blicas no R2');
            return null;
        }

        return url;
    };

    return { checkAndRefreshUrl, isUrlExpired, isR2SignedUrl, isSupabaseStorageUrl };
}